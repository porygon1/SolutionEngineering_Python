services:
  streamlit:
    build: ./streamlit_app
    container_name: spotify-recommendation-system
    ports:
      - "8501:8501"
    volumes:
      - ./data/raw:/app/data/raw:ro  # Raw data (read-only)
      - ./data/models:/app/data/models:ro  # Models (read-only)
      - ./logs:/app/logs  # Logs directory (read-write)
    environment:
      # Streamlit configuration
      - STREAMLIT_SERVER_ENABLECORS=false
      - STREAMLIT_SERVER_ENABLEXSRFPROTECTION=false
      # Spotify API configuration (will be loaded from .env file if available)
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID:-}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET:-}
      - SPOTIFY_API_BASE_URL=${SPOTIFY_API_BASE_URL:-https://api.spotify.com/v1}
      - SPOTIFY_TOKEN_URL=${SPOTIFY_TOKEN_URL:-https://accounts.spotify.com/api/token}
      - SPOTIFY_REQUESTS_PER_SECOND=${SPOTIFY_REQUESTS_PER_SECOND:-10}
      - SPOTIFY_MAX_RETRIES=${SPOTIFY_MAX_RETRIES:-3}
      - ENABLE_SPOTIFY_API=${ENABLE_SPOTIFY_API:-true}
      # Advanced Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-true}
      - ENABLE_JSON_LOGGING=${ENABLE_JSON_LOGGING:-false}
      - ENABLE_PERFORMANCE_LOGGING=${ENABLE_PERFORMANCE_LOGGING:-true}
      - MAX_LOG_FILES=${MAX_LOG_FILES:-30}
      - MAX_LOG_SIZE_MB=${MAX_LOG_SIZE_MB:-50}
      # Optional: Additional logging configuration
      - LOG_FORMAT=${LOG_FORMAT:-standard}
      - LOG_TO_CONSOLE=${LOG_TO_CONSOLE:-true}
      - LOG_TIMEZONE=${LOG_TIMEZONE:-UTC}
    env_file:
      - .env  # Load environment variables from .env file (if it exists)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Optional: Add a PostgreSQL database for storing processed data
# postgres:
#   image: postgres:14-alpine
#   container_name: spotify-analysis-db
#   ports:
#     - "5432:5432"
#   volumes:
#     - postgres_data:/var/lib/postgresql/data
#   environment:
#     - POSTGRES_USER=postgres
#     - POSTGRES_PASSWORD=postgres
#     - POSTGRES_DB=spotify_data
#   restart: unless-stopped
#   healthcheck:
#     test: ["CMD-SHELL", "pg_isready -U postgres"]
#     interval: 30s
#     timeout: 5s
#     retries: 3
#     start_period: 10s

# Optional: Add an Adminer for database management
# adminer:
#   image: adminer:latest
#   container_name: spotify-analysis-adminer
#   ports:
#     - "8080:8080"
#   restart: unless-stopped
#   depends_on:
#     - postgres

# Optional: Add a data processing service
# data-processor:
#   build: ./data_processor
#   container_name: spotify-analysis-processor
#   volumes:
#     - ./data:/app/data
#   depends_on:
#     - postgres
#   restart: on-failure

# Define volumes
# volumes:
#   postgres_data: 